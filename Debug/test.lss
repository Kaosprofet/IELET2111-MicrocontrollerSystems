
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000022e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a67  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000887  00000000  00000000  00000da7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a6  00000000  00000000  0000162e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000433  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ff  00000000  00000000  000020d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000021d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  88:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_read>:

#include "adc.h"
#include <avr/io.h>

int adc_read(void) {
  ADCSRA |= (1<<ADSC);
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  do {} while (ADCSRA & (1<<ADSC));
  9a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9e:	86 fd       	sbrc	r24, 6
  a0:	fc cf       	rjmp	.-8      	; 0x9a <adc_read+0xa>
  return ADC;
  a2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  a6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  aa:	08 95       	ret

000000ac <adc_init>:

void adc_init(void) {
  ADMUX = (1<<REFS0);
  ac:	90 e4       	ldi	r25, 0x40	; 64
  ae:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  DIDR0 |= (1<<ADC0D);
  b2:	ee e7       	ldi	r30, 0x7E	; 126
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	80 83       	st	Z, r24
  ADCSRA = (1<<ADEN);
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

  DDRD = 0x00;
  c2:	1a b8       	out	0x0a, r1	; 10
  DDRC = 0x00;
  c4:	17 b8       	out	0x07, r1	; 7
  PORTC |= (1<<SENSOR);
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	88 b9       	out	0x08, r24	; 8
  ACSR = (1<<ACBG);
  cc:	90 bf       	out	0x30, r25	; 48
  ce:	08 95       	ret

000000d0 <initInterupt>:
#include <avr/interrupt.h>
#include "int.h"

void initInterupt(void){
	PORTD = (1<<intPin);	// Internal pullup 
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	8b b9       	out	0x0b, r24	; 11
	EIMSK = (1<<INT0);		// Enable interupt 0
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	8d bb       	out	0x1d, r24	; 29
	sei();					// Enable global interupts
  d8:	78 94       	sei
  da:	08 95       	ret

000000dc <main>:
#include "int.h"

uint16_t temp = 0;

int main(void) {
    timer1PWMInit();
  dc:	0e 94 86 00 	call	0x10c	; 0x10c <timer1PWMInit>
	adc_init();
  e0:	0e 94 56 00 	call	0xac	; 0xac <adc_init>
	initInterupt();
  e4:	0e 94 68 00 	call	0xd0	; 0xd0 <initInterupt>
    while (1) {
		//calServo(); // Calibrate the servo to find min/max values
		
		temp = adc_read();
  e8:	0e 94 48 00 	call	0x90	; 0x90 <adc_read>
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		runServo(temp);
  f4:	0e 94 95 00 	call	0x12a	; 0x12a <runServo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	83 ed       	ldi	r24, 0xD3	; 211
  fc:	90 e3       	ldi	r25, 0x30	; 48
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x22>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x2c>
 108:	00 00       	nop
 10a:	ee cf       	rjmp	.-36     	; 0xe8 <main+0xc>

0000010c <timer1PWMInit>:
#include <avr/io.h>
#include <util/delay.h>
#include "servo.h"

void timer1PWMInit(void) {
	DDRB = (1<<SERVO_PIN);										// Setting PB1 as output
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10);		// Setting fast PWM and non-inverting mode
 110:	82 e8       	ldi	r24, 0x82	; 130
 112:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS11)|(1<<WGM13)|(1<<WGM12);					// Fast PWM and set prescaling
 116:	8a e1       	ldi	r24, 0x1A	; 26
 118:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = SERVO_PERIOD;
 11c:	80 e4       	ldi	r24, 0x40	; 64
 11e:	9c e9       	ldi	r25, 0x9C	; 156
 120:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 124:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 128:	08 95       	ret

0000012a <runServo>:
}

void runServo(uint16_t temp) {
	temp = 1023-temp;
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	33 e0       	ldi	r19, 0x03	; 3
 12e:	28 1b       	sub	r18, r24
 130:	39 0b       	sbc	r19, r25
	temp = (temp - ADC_MIN) * (SERVO_MAX - SERVO_MIN) / (ADC_MAX - ADC_MIN) + SERVO_MIN;	// Mapping value for servo
 132:	a8 ed       	ldi	r26, 0xD8	; 216
 134:	be e0       	ldi	r27, 0x0E	; 14
 136:	0e 94 cc 00 	call	0x198	; 0x198 <__umulhisi3>
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	33 e0       	ldi	r19, 0x03	; 3
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	0e 94 aa 00 	call	0x154	; 0x154 <__udivmodsi4>
 146:	20 55       	subi	r18, 0x50	; 80
 148:	3b 4f       	sbci	r19, 0xFB	; 251
	OCR1A = temp;
 14a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 14e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 152:	08 95       	ret

00000154 <__udivmodsi4>:
 154:	a1 e2       	ldi	r26, 0x21	; 33
 156:	1a 2e       	mov	r1, r26
 158:	aa 1b       	sub	r26, r26
 15a:	bb 1b       	sub	r27, r27
 15c:	fd 01       	movw	r30, r26
 15e:	0d c0       	rjmp	.+26     	; 0x17a <__udivmodsi4_ep>

00000160 <__udivmodsi4_loop>:
 160:	aa 1f       	adc	r26, r26
 162:	bb 1f       	adc	r27, r27
 164:	ee 1f       	adc	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	a2 17       	cp	r26, r18
 16a:	b3 07       	cpc	r27, r19
 16c:	e4 07       	cpc	r30, r20
 16e:	f5 07       	cpc	r31, r21
 170:	20 f0       	brcs	.+8      	; 0x17a <__udivmodsi4_ep>
 172:	a2 1b       	sub	r26, r18
 174:	b3 0b       	sbc	r27, r19
 176:	e4 0b       	sbc	r30, r20
 178:	f5 0b       	sbc	r31, r21

0000017a <__udivmodsi4_ep>:
 17a:	66 1f       	adc	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	88 1f       	adc	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	1a 94       	dec	r1
 184:	69 f7       	brne	.-38     	; 0x160 <__udivmodsi4_loop>
 186:	60 95       	com	r22
 188:	70 95       	com	r23
 18a:	80 95       	com	r24
 18c:	90 95       	com	r25
 18e:	9b 01       	movw	r18, r22
 190:	ac 01       	movw	r20, r24
 192:	bd 01       	movw	r22, r26
 194:	cf 01       	movw	r24, r30
 196:	08 95       	ret

00000198 <__umulhisi3>:
 198:	a2 9f       	mul	r26, r18
 19a:	b0 01       	movw	r22, r0
 19c:	b3 9f       	mul	r27, r19
 19e:	c0 01       	movw	r24, r0
 1a0:	a3 9f       	mul	r26, r19
 1a2:	70 0d       	add	r23, r0
 1a4:	81 1d       	adc	r24, r1
 1a6:	11 24       	eor	r1, r1
 1a8:	91 1d       	adc	r25, r1
 1aa:	b2 9f       	mul	r27, r18
 1ac:	70 0d       	add	r23, r0
 1ae:	81 1d       	adc	r24, r1
 1b0:	11 24       	eor	r1, r1
 1b2:	91 1d       	adc	r25, r1
 1b4:	08 95       	ret

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
