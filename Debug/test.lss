
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a88  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089e  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b6  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043e  00000000  00000000  00001d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000137  00000000  00000000  00002192  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000022c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_1>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 75 00 	call	0xea	; 0xea <main>
  88:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_read>:

#include "adc.h"
#include <avr/io.h>

int adc_read(void) {
  ADCSRA |= (1<<ADSC);
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  do {} while (ADCSRA & (1<<ADSC));
  9a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9e:	86 fd       	sbrc	r24, 6
  a0:	fc cf       	rjmp	.-8      	; 0x9a <adc_read+0xa>
  return ADC;
  a2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  a6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  aa:	08 95       	ret

000000ac <adc_init>:

void adc_init(int pin) {
  ADMUX = (1<<REFS0);
  ac:	40 e4       	ldi	r20, 0x40	; 64
  ae:	40 93 7c 00 	sts	0x007C, r20	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  DIDR0 |= (1<<ADC0D);
  b2:	ee e7       	ldi	r30, 0x7E	; 126
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	91 60       	ori	r25, 0x01	; 1
  ba:	90 83       	st	Z, r25
  ADCSRA = (1<<ADEN);
  bc:	90 e8       	ldi	r25, 0x80	; 128
  be:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

  DDRD = 0x00;
  c2:	1a b8       	out	0x0a, r1	; 10
  DDRC = 0x00;
  c4:	17 b8       	out	0x07, r1	; 7
  PORTC |= (1<<pin);
  c6:	98 b1       	in	r25, 0x08	; 8
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <adc_init+0x26>
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <adc_init+0x22>
  d6:	29 2b       	or	r18, r25
  d8:	28 b9       	out	0x08, r18	; 8
  ACSR = (1<<ACBG);
  da:	40 bf       	out	0x30, r20	; 48
  dc:	08 95       	ret

000000de <initInterupt>:
#include <avr/interrupt.h>
#include "int.h"

void initInterupt(void){
	PORTD = (1<<intPin1)|(1<<intPin2);	// Internal pullup 
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	8b b9       	out	0x0b, r24	; 11
	EIMSK = (1<<INT0)|(1<<INT1);		// Enable interupt 0
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	8d bb       	out	0x1d, r24	; 29
	sei();								// Enable global interupts
  e6:	78 94       	sei
  e8:	08 95       	ret

000000ea <main>:
#include "int.h"

uint16_t temp = 0;

int main(void) {
    timer1PWMInit();
  ea:	0e 94 a3 00 	call	0x146	; 0x146 <timer1PWMInit>
	adc_init(0);
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 56 00 	call	0xac	; 0xac <adc_init>
	initInterupt();
  f6:	0e 94 6f 00 	call	0xde	; 0xde <initInterupt>
    while (1) {
		//calServo(); // Calibrate the servo to find min/max values
		
		temp = adc_read();
  fa:	0e 94 48 00 	call	0x90	; 0x90 <adc_read>
  fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		runServo(temp);
 106:	0e 94 b2 00 	call	0x164	; 0x164 <runServo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	83 ed       	ldi	r24, 0xD3	; 211
 10e:	90 e3       	ldi	r25, 0x30	; 48
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x26>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x30>
 11a:	00 00       	nop
 11c:	ee cf       	rjmp	.-36     	; 0xfa <main+0x10>

0000011e <__vector_1>:
		_delay_ms(1000);
    }
}

ISR(INT0_vect) {
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
	
}
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_2>:

ISR(INT1_vect) {
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
	
}
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <timer1PWMInit>:
#include <avr/io.h>
#include <util/delay.h>
#include "servo.h"

void timer1PWMInit(void) {
	DDRB = (1<<SERVO_PIN);										// Setting PB1 as output
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10);		// Setting fast PWM and non-inverting mode
 14a:	82 e8       	ldi	r24, 0x82	; 130
 14c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS11)|(1<<WGM13)|(1<<WGM12);					// Fast PWM and set prescaling
 150:	8a e1       	ldi	r24, 0x1A	; 26
 152:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = SERVO_PERIOD;
 156:	80 e4       	ldi	r24, 0x40	; 64
 158:	9c e9       	ldi	r25, 0x9C	; 156
 15a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 15e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 162:	08 95       	ret

00000164 <runServo>:
}

void runServo(uint16_t temp) {
	temp = 1023-temp;
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	33 e0       	ldi	r19, 0x03	; 3
 168:	28 1b       	sub	r18, r24
 16a:	39 0b       	sbc	r19, r25
	temp = (temp - ADC_MIN) * (SERVO_MAX - SERVO_MIN) / (ADC_MAX - ADC_MIN) + SERVO_MIN;	// Mapping value for servo
 16c:	a8 ed       	ldi	r26, 0xD8	; 216
 16e:	be e0       	ldi	r27, 0x0E	; 14
 170:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__umulhisi3>
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	33 e0       	ldi	r19, 0x03	; 3
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	0e 94 c7 00 	call	0x18e	; 0x18e <__udivmodsi4>
 180:	20 55       	subi	r18, 0x50	; 80
 182:	3b 4f       	sbci	r19, 0xFB	; 251
	OCR1A = temp;
 184:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 188:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 18c:	08 95       	ret

0000018e <__udivmodsi4>:
 18e:	a1 e2       	ldi	r26, 0x21	; 33
 190:	1a 2e       	mov	r1, r26
 192:	aa 1b       	sub	r26, r26
 194:	bb 1b       	sub	r27, r27
 196:	fd 01       	movw	r30, r26
 198:	0d c0       	rjmp	.+26     	; 0x1b4 <__udivmodsi4_ep>

0000019a <__udivmodsi4_loop>:
 19a:	aa 1f       	adc	r26, r26
 19c:	bb 1f       	adc	r27, r27
 19e:	ee 1f       	adc	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	a2 17       	cp	r26, r18
 1a4:	b3 07       	cpc	r27, r19
 1a6:	e4 07       	cpc	r30, r20
 1a8:	f5 07       	cpc	r31, r21
 1aa:	20 f0       	brcs	.+8      	; 0x1b4 <__udivmodsi4_ep>
 1ac:	a2 1b       	sub	r26, r18
 1ae:	b3 0b       	sbc	r27, r19
 1b0:	e4 0b       	sbc	r30, r20
 1b2:	f5 0b       	sbc	r31, r21

000001b4 <__udivmodsi4_ep>:
 1b4:	66 1f       	adc	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	88 1f       	adc	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	1a 94       	dec	r1
 1be:	69 f7       	brne	.-38     	; 0x19a <__udivmodsi4_loop>
 1c0:	60 95       	com	r22
 1c2:	70 95       	com	r23
 1c4:	80 95       	com	r24
 1c6:	90 95       	com	r25
 1c8:	9b 01       	movw	r18, r22
 1ca:	ac 01       	movw	r20, r24
 1cc:	bd 01       	movw	r22, r26
 1ce:	cf 01       	movw	r24, r30
 1d0:	08 95       	ret

000001d2 <__umulhisi3>:
 1d2:	a2 9f       	mul	r26, r18
 1d4:	b0 01       	movw	r22, r0
 1d6:	b3 9f       	mul	r27, r19
 1d8:	c0 01       	movw	r24, r0
 1da:	a3 9f       	mul	r26, r19
 1dc:	70 0d       	add	r23, r0
 1de:	81 1d       	adc	r24, r1
 1e0:	11 24       	eor	r1, r1
 1e2:	91 1d       	adc	r25, r1
 1e4:	b2 9f       	mul	r27, r18
 1e6:	70 0d       	add	r23, r0
 1e8:	81 1d       	adc	r24, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	91 1d       	adc	r25, r1
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
