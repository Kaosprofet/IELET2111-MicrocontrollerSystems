
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d1  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e5  00000000  00000000  00000a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ca  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d9  00000000  00000000  0000182a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001903  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  88:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <timer1PWMInit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	84 b9       	out	0x04, r24	; 4
  94:	82 e8       	ldi	r24, 0x82	; 130
  96:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  9a:	8a e1       	ldi	r24, 0x1A	; 26
  9c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  a0:	80 e4       	ldi	r24, 0x40	; 64
  a2:	9c e9       	ldi	r25, 0x9C	; 156
  a4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  a8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  ac:	08 95       	ret

000000ae <runServo>:
	OCR1A = SERVO_MAX;
	_delay_ms(1000);
}

void runServo(uint16_t temp) {
	temp = 1023-temp;																// Compensating for physical dial
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	33 e0       	ldi	r19, 0x03	; 3
  b2:	28 1b       	sub	r18, r24
  b4:	39 0b       	sbc	r19, r25
	temp = (temp - 0) * (SERVO_MAX - SERVO_MIN) / (ADC_MAX - ADC_MIN) + SERVO_MIN;	// Mapping value for servo
  b6:	a8 ed       	ldi	r26, 0xD8	; 216
  b8:	be e0       	ldi	r27, 0x0E	; 14
  ba:	0e 94 99 00 	call	0x132	; 0x132 <__umulhisi3>
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	33 e0       	ldi	r19, 0x03	; 3
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	0e 94 77 00 	call	0xee	; 0xee <__udivmodsi4>
  ca:	20 55       	subi	r18, 0x50	; 80
  cc:	3b 4f       	sbci	r19, 0xFB	; 251
	OCR1A = temp;																	// Writing to servo
  ce:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  d2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  d6:	08 95       	ret

000000d8 <main>:
void timer1PWMInit(void);
void calServo(void);
void runServo(uint16_t temp);

int main(void) {
    timer1PWMInit();
  d8:	0e 94 48 00 	call	0x90	; 0x90 <timer1PWMInit>
    while (1) {
		//calServo(); // Calibrate the servo to find min/max values
		
		temp = 1023; // Bytt ut med ACD lesing
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		runServo(temp);
  e8:	0e 94 57 00 	call	0xae	; 0xae <runServo>
  ec:	f7 cf       	rjmp	.-18     	; 0xdc <main+0x4>

000000ee <__udivmodsi4>:
  ee:	a1 e2       	ldi	r26, 0x21	; 33
  f0:	1a 2e       	mov	r1, r26
  f2:	aa 1b       	sub	r26, r26
  f4:	bb 1b       	sub	r27, r27
  f6:	fd 01       	movw	r30, r26
  f8:	0d c0       	rjmp	.+26     	; 0x114 <__udivmodsi4_ep>

000000fa <__udivmodsi4_loop>:
  fa:	aa 1f       	adc	r26, r26
  fc:	bb 1f       	adc	r27, r27
  fe:	ee 1f       	adc	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	a2 17       	cp	r26, r18
 104:	b3 07       	cpc	r27, r19
 106:	e4 07       	cpc	r30, r20
 108:	f5 07       	cpc	r31, r21
 10a:	20 f0       	brcs	.+8      	; 0x114 <__udivmodsi4_ep>
 10c:	a2 1b       	sub	r26, r18
 10e:	b3 0b       	sbc	r27, r19
 110:	e4 0b       	sbc	r30, r20
 112:	f5 0b       	sbc	r31, r21

00000114 <__udivmodsi4_ep>:
 114:	66 1f       	adc	r22, r22
 116:	77 1f       	adc	r23, r23
 118:	88 1f       	adc	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	1a 94       	dec	r1
 11e:	69 f7       	brne	.-38     	; 0xfa <__udivmodsi4_loop>
 120:	60 95       	com	r22
 122:	70 95       	com	r23
 124:	80 95       	com	r24
 126:	90 95       	com	r25
 128:	9b 01       	movw	r18, r22
 12a:	ac 01       	movw	r20, r24
 12c:	bd 01       	movw	r22, r26
 12e:	cf 01       	movw	r24, r30
 130:	08 95       	ret

00000132 <__umulhisi3>:
 132:	a2 9f       	mul	r26, r18
 134:	b0 01       	movw	r22, r0
 136:	b3 9f       	mul	r27, r19
 138:	c0 01       	movw	r24, r0
 13a:	a3 9f       	mul	r26, r19
 13c:	70 0d       	add	r23, r0
 13e:	81 1d       	adc	r24, r1
 140:	11 24       	eor	r1, r1
 142:	91 1d       	adc	r25, r1
 144:	b2 9f       	mul	r27, r18
 146:	70 0d       	add	r23, r0
 148:	81 1d       	adc	r24, r1
 14a:	11 24       	eor	r1, r1
 14c:	91 1d       	adc	r25, r1
 14e:	08 95       	ret

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
