
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079e  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ae  00000000  00000000  00000982  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ae  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001703  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer1PWMInit>:
		calServo(); // Calibrate the servo to find min/max values
    }
}

void timer1PWMInit(void) {
	DDRB = (1<<DDB1);											// Setting PB1 as output
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10);		// Setting fast PWM and non-inverting mode
  84:	82 e8       	ldi	r24, 0x82	; 130
  86:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS11)|(1<<WGM13)|(1<<WGM12);					// Fast PWM and set prescaling
  8a:	8a e1       	ldi	r24, 0x1A	; 26
  8c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = SERVO_PERIOD;
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	9c e9       	ldi	r25, 0x9C	; 156
  94:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  98:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  9c:	08 95       	ret

0000009e <calServo>:
}

void calServo(void) {
	OCR1A = SERVO_MIN;
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 eb       	ldi	r24, 0xB0	; 176
  a4:	94 e0       	ldi	r25, 0x04	; 4
  a6:	91 83       	std	Z+1, r25	; 0x01
  a8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	83 ed       	ldi	r24, 0xD3	; 211
  ae:	90 e3       	ldi	r25, 0x30	; 48
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <calServo+0x12>
  b8:	00 c0       	rjmp	.+0      	; 0xba <calServo+0x1c>
  ba:	00 00       	nop
	_delay_ms(1000);
	OCR1A = SERVO_MAX;
  bc:	88 e8       	ldi	r24, 0x88	; 136
  be:	93 e1       	ldi	r25, 0x13	; 19
  c0:	91 83       	std	Z+1, r25	; 0x01
  c2:	80 83       	st	Z, r24
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	83 ed       	ldi	r24, 0xD3	; 211
  c8:	90 e3       	ldi	r25, 0x30	; 48
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <calServo+0x2c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <calServo+0x36>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <main>:
void timer1PWMInit(void);
void calServo(void);
void runServo(void);

int main(void) {
    timer1PWMInit();
  d8:	0e 94 40 00 	call	0x80	; 0x80 <timer1PWMInit>
    while (1) {
		calServo(); // Calibrate the servo to find min/max values
  dc:	0e 94 4f 00 	call	0x9e	; 0x9e <calServo>
  e0:	fd cf       	rjmp	.-6      	; 0xdc <main+0x4>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
