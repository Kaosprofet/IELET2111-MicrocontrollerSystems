
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000438  000004cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000438  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800108  00800108  000004d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001025  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a54  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000933  00000000  00000000  000020e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00002a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000559  00000000  00000000  00002cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b6  00000000  00000000  00003215  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000039cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_1>
   8:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 84 00 	call	0x108	; 0x108 <main>
  9e:	0c 94 1a 02 	jmp	0x434	; 0x434 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_read>:
#include <avr/io.h>
#include "adc.h"


uint16_t adc_read(void) {
  ADCSRA |= (1<<ADSC);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  do {} while (ADCSRA & (1<<ADSC));
  b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b4:	86 fd       	sbrc	r24, 6
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <adc_read+0xa>
  uint8_t temp_vall = ADCL;
  b8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  uint8_t temp_valh = ADCH;
  bc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  uint16_t temp_val = (temp_valh<<8) | (temp_vall);
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	98 2f       	mov	r25, r24
  c4:	88 27       	eor	r24, r24
  return temp_val;
}
  c6:	82 2b       	or	r24, r18
  c8:	08 95       	ret

000000ca <adc_init>:

void adc_init(int pin) {
  ADMUX = (1<<REFS0)|(0<<ADLAR);
  ca:	40 e4       	ldi	r20, 0x40	; 64
  cc:	40 93 7c 00 	sts	0x007C, r20	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  DIDR0 |= (1<<ADC0D);
  d0:	ee e7       	ldi	r30, 0x7E	; 126
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	90 81       	ld	r25, Z
  d6:	91 60       	ori	r25, 0x01	; 1
  d8:	90 83       	st	Z, r25
  ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) ;
  da:	93 e8       	ldi	r25, 0x83	; 131
  dc:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

  DDRD = 0x00;
  e0:	1a b8       	out	0x0a, r1	; 10
  DDRC = 0x00;
  e2:	17 b8       	out	0x07, r1	; 7
  PORTC |= (1<<pin);
  e4:	98 b1       	in	r25, 0x08	; 8
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <adc_init+0x26>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	8a 95       	dec	r24
  f2:	e2 f7       	brpl	.-8      	; 0xec <adc_init+0x22>
  f4:	29 2b       	or	r18, r25
  f6:	28 b9       	out	0x08, r18	; 8
  ACSR = (1<<ACBG);
  f8:	40 bf       	out	0x30, r20	; 48
  fa:	08 95       	ret

000000fc <initInterupt>:
#include <avr/interrupt.h>
#include "int.h"

void initInterupt(void){
	PORTD = (1<<intPin1)|(1<<intPin2);	// Internal pullup 
  fc:	8c e0       	ldi	r24, 0x0C	; 12
  fe:	8b b9       	out	0x0b, r24	; 11
	EIMSK = (1<<INT0)|(1<<INT1);		// Enable interupt 0
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	8d bb       	out	0x1d, r24	; 29
	sei();								// Enable global interupts
 104:	78 94       	sei
 106:	08 95       	ret

00000108 <main>:
#include "usart.h"

uint16_t temp = 0;

int main(void) {
    timer1PWMInit();
 108:	0e 94 e5 00 	call	0x1ca	; 0x1ca <timer1PWMInit>
	adc_init(0);
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 65 00 	call	0xca	; 0xca <adc_init>
	initUSART();
 114:	0e 94 09 01 	call	0x212	; 0x212 <initUSART>
	runServo(0);
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <runServo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	83 ed       	ldi	r24, 0xD3	; 211
 124:	90 e3       	ldi	r25, 0x30	; 48
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x1e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x28>
 130:	00 00       	nop
	_delay_ms(1000);
	initInterupt();
 132:	0e 94 7e 00 	call	0xfc	; 0xfc <initInterupt>
    while (1) {
		//calServo(); // Calibrate the servo to find min/max values
		
		temp = adc_read();
 136:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_read>
 13a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 13e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		runServo(temp);
 142:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <runServo>
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	83 ed       	ldi	r24, 0xD3	; 211
 14a:	90 e3       	ldi	r25, 0x30	; 48
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x44>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x4e>
 156:	00 00       	nop
 158:	ee cf       	rjmp	.-36     	; 0x136 <main+0x2e>

0000015a <__vector_1>:
		
		
    }
}

ISR(INT0_vect) {
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
	printString("Value:" );
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 21 01 	call	0x242	; 0x242 <printString>
	printWord(temp);
 184:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 188:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 18c:	0e 94 34 01 	call	0x268	; 0x268 <printWord>
	crnl();
 190:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <crnl>
}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <__vector_2>:

ISR(INT1_vect) {
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
	
}
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <timer1PWMInit>:
#include <avr/io.h>
#include <util/delay.h>
#include "servo.h"

void timer1PWMInit(void) {
	DDRB = (1<<SERVO_PIN);										// Setting PB1 as output
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10);		// Setting fast PWM and non-inverting mode
 1ce:	82 e8       	ldi	r24, 0x82	; 130
 1d0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS11)|(1<<WGM13)|(1<<WGM12);					// Fast PWM and set prescaling
 1d4:	8a e1       	ldi	r24, 0x1A	; 26
 1d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = SERVO_PERIOD;
 1da:	80 e4       	ldi	r24, 0x40	; 64
 1dc:	9c e9       	ldi	r25, 0x9C	; 156
 1de:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1e2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1e6:	08 95       	ret

000001e8 <runServo>:
}

void runServo(uint16_t temp) {
	temp = 1023-temp;
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	33 e0       	ldi	r19, 0x03	; 3
 1ec:	28 1b       	sub	r18, r24
 1ee:	39 0b       	sbc	r19, r25
	temp = temp * (SERVO_MAX - SERVO_MIN) / ADC_MAX + SERVO_MIN;	// Mapping value for servo
 1f0:	a8 ed       	ldi	r26, 0xD8	; 216
 1f2:	be e0       	ldi	r27, 0x0E	; 14
 1f4:	0e 94 0b 02 	call	0x416	; 0x416 <__umulhisi3>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	33 e0       	ldi	r19, 0x03	; 3
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__udivmodsi4>
 204:	20 55       	subi	r18, 0x50	; 80
 206:	3b 4f       	sbci	r19, 0xFB	; 251
	OCR1A = temp;
 208:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 20c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 210:	08 95       	ret

00000212 <initUSART>:
  if(number >=10)
  {
    transmitByte('0'+((number /10)%10));
  }
  transmitByte('0'+(number %10));
}
 212:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 216:	87 e6       	ldi	r24, 0x67	; 103
 218:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 21c:	e0 ec       	ldi	r30, 0xC0	; 192
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	8d 7f       	andi	r24, 0xFD	; 253
 224:	80 83       	st	Z, r24
 226:	88 e1       	ldi	r24, 0x18	; 24
 228:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 232:	08 95       	ret

00000234 <transmitByte>:
 234:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 238:	95 ff       	sbrs	r25, 5
 23a:	fc cf       	rjmp	.-8      	; 0x234 <transmitByte>
 23c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 240:	08 95       	ret

00000242 <printString>:
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	8c 01       	movw	r16, r24
 24a:	c0 e0       	ldi	r28, 0x00	; 0
 24c:	03 c0       	rjmp	.+6      	; 0x254 <printString+0x12>
 24e:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
 252:	cf 5f       	subi	r28, 0xFF	; 255
 254:	f8 01       	movw	r30, r16
 256:	ec 0f       	add	r30, r28
 258:	f1 1d       	adc	r31, r1
 25a:	80 81       	ld	r24, Z
 25c:	81 11       	cpse	r24, r1
 25e:	f7 cf       	rjmp	.-18     	; 0x24e <printString+0xc>
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <printWord>:
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
 272:	9c 01       	movw	r18, r24
 274:	32 95       	swap	r19
 276:	22 95       	swap	r18
 278:	2f 70       	andi	r18, 0x0F	; 15
 27a:	23 27       	eor	r18, r19
 27c:	3f 70       	andi	r19, 0x0F	; 15
 27e:	23 27       	eor	r18, r19
 280:	a7 e4       	ldi	r26, 0x47	; 71
 282:	b3 e0       	ldi	r27, 0x03	; 3
 284:	0e 94 0b 02 	call	0x416	; 0x416 <__umulhisi3>
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	80 5d       	subi	r24, 0xD0	; 208
 296:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
 29a:	9e 01       	movw	r18, r28
 29c:	36 95       	lsr	r19
 29e:	27 95       	ror	r18
 2a0:	36 95       	lsr	r19
 2a2:	27 95       	ror	r18
 2a4:	36 95       	lsr	r19
 2a6:	27 95       	ror	r18
 2a8:	a5 ec       	ldi	r26, 0xC5	; 197
 2aa:	b0 e2       	ldi	r27, 0x20	; 32
 2ac:	0e 94 0b 02 	call	0x416	; 0x416 <__umulhisi3>
 2b0:	ac 01       	movw	r20, r24
 2b2:	52 95       	swap	r21
 2b4:	42 95       	swap	r20
 2b6:	4f 70       	andi	r20, 0x0F	; 15
 2b8:	45 27       	eor	r20, r21
 2ba:	5f 70       	andi	r21, 0x0F	; 15
 2bc:	45 27       	eor	r20, r21
 2be:	9a 01       	movw	r18, r20
 2c0:	ad ec       	ldi	r26, 0xCD	; 205
 2c2:	bc ec       	ldi	r27, 0xCC	; 204
 2c4:	0e 94 0b 02 	call	0x416	; 0x416 <__umulhisi3>
 2c8:	96 95       	lsr	r25
 2ca:	87 95       	ror	r24
 2cc:	96 95       	lsr	r25
 2ce:	87 95       	ror	r24
 2d0:	96 95       	lsr	r25
 2d2:	87 95       	ror	r24
 2d4:	9c 01       	movw	r18, r24
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	82 0f       	add	r24, r18
 2e8:	93 1f       	adc	r25, r19
 2ea:	9a 01       	movw	r18, r20
 2ec:	28 1b       	sub	r18, r24
 2ee:	39 0b       	sbc	r19, r25
 2f0:	c9 01       	movw	r24, r18
 2f2:	80 5d       	subi	r24, 0xD0	; 208
 2f4:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
 2f8:	9e 01       	movw	r18, r28
 2fa:	36 95       	lsr	r19
 2fc:	27 95       	ror	r18
 2fe:	36 95       	lsr	r19
 300:	27 95       	ror	r18
 302:	ab e7       	ldi	r26, 0x7B	; 123
 304:	b4 e1       	ldi	r27, 0x14	; 20
 306:	0e 94 0b 02 	call	0x416	; 0x416 <__umulhisi3>
 30a:	ac 01       	movw	r20, r24
 30c:	56 95       	lsr	r21
 30e:	47 95       	ror	r20
 310:	9a 01       	movw	r18, r20
 312:	ad ec       	ldi	r26, 0xCD	; 205
 314:	bc ec       	ldi	r27, 0xCC	; 204
 316:	0e 94 0b 02 	call	0x416	; 0x416 <__umulhisi3>
 31a:	96 95       	lsr	r25
 31c:	87 95       	ror	r24
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	9c 01       	movw	r18, r24
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	82 0f       	add	r24, r18
 33a:	93 1f       	adc	r25, r19
 33c:	9a 01       	movw	r18, r20
 33e:	28 1b       	sub	r18, r24
 340:	39 0b       	sbc	r19, r25
 342:	c9 01       	movw	r24, r18
 344:	80 5d       	subi	r24, 0xD0	; 208
 346:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
 34a:	9e 01       	movw	r18, r28
 34c:	ad ec       	ldi	r26, 0xCD	; 205
 34e:	bc ec       	ldi	r27, 0xCC	; 204
 350:	0e 94 0b 02 	call	0x416	; 0x416 <__umulhisi3>
 354:	8c 01       	movw	r16, r24
 356:	16 95       	lsr	r17
 358:	07 95       	ror	r16
 35a:	16 95       	lsr	r17
 35c:	07 95       	ror	r16
 35e:	16 95       	lsr	r17
 360:	07 95       	ror	r16
 362:	98 01       	movw	r18, r16
 364:	0e 94 0b 02 	call	0x416	; 0x416 <__umulhisi3>
 368:	96 95       	lsr	r25
 36a:	87 95       	ror	r24
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	9c 01       	movw	r18, r24
 376:	22 0f       	add	r18, r18
 378:	33 1f       	adc	r19, r19
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	82 0f       	add	r24, r18
 388:	93 1f       	adc	r25, r19
 38a:	98 01       	movw	r18, r16
 38c:	28 1b       	sub	r18, r24
 38e:	39 0b       	sbc	r19, r25
 390:	c9 01       	movw	r24, r18
 392:	80 5d       	subi	r24, 0xD0	; 208
 394:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
 398:	c8 01       	movw	r24, r16
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	00 0f       	add	r16, r16
 3a0:	11 1f       	adc	r17, r17
 3a2:	00 0f       	add	r16, r16
 3a4:	11 1f       	adc	r17, r17
 3a6:	00 0f       	add	r16, r16
 3a8:	11 1f       	adc	r17, r17
 3aa:	08 0f       	add	r16, r24
 3ac:	19 1f       	adc	r17, r25
 3ae:	ce 01       	movw	r24, r28
 3b0:	80 1b       	sub	r24, r16
 3b2:	91 0b       	sbc	r25, r17
 3b4:	80 5d       	subi	r24, 0xD0	; 208
 3b6:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	08 95       	ret

000003c4 <crnl>:

void crnl(void) {
  //carriage return and newline
  transmitByte(10);
 3c4:	8a e0       	ldi	r24, 0x0A	; 10
 3c6:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
  transmitByte(13);
 3ca:	8d e0       	ldi	r24, 0x0D	; 13
 3cc:	0e 94 1a 01 	call	0x234	; 0x234 <transmitByte>
 3d0:	08 95       	ret

000003d2 <__udivmodsi4>:
 3d2:	a1 e2       	ldi	r26, 0x21	; 33
 3d4:	1a 2e       	mov	r1, r26
 3d6:	aa 1b       	sub	r26, r26
 3d8:	bb 1b       	sub	r27, r27
 3da:	fd 01       	movw	r30, r26
 3dc:	0d c0       	rjmp	.+26     	; 0x3f8 <__udivmodsi4_ep>

000003de <__udivmodsi4_loop>:
 3de:	aa 1f       	adc	r26, r26
 3e0:	bb 1f       	adc	r27, r27
 3e2:	ee 1f       	adc	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	a2 17       	cp	r26, r18
 3e8:	b3 07       	cpc	r27, r19
 3ea:	e4 07       	cpc	r30, r20
 3ec:	f5 07       	cpc	r31, r21
 3ee:	20 f0       	brcs	.+8      	; 0x3f8 <__udivmodsi4_ep>
 3f0:	a2 1b       	sub	r26, r18
 3f2:	b3 0b       	sbc	r27, r19
 3f4:	e4 0b       	sbc	r30, r20
 3f6:	f5 0b       	sbc	r31, r21

000003f8 <__udivmodsi4_ep>:
 3f8:	66 1f       	adc	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	88 1f       	adc	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	1a 94       	dec	r1
 402:	69 f7       	brne	.-38     	; 0x3de <__udivmodsi4_loop>
 404:	60 95       	com	r22
 406:	70 95       	com	r23
 408:	80 95       	com	r24
 40a:	90 95       	com	r25
 40c:	9b 01       	movw	r18, r22
 40e:	ac 01       	movw	r20, r24
 410:	bd 01       	movw	r22, r26
 412:	cf 01       	movw	r24, r30
 414:	08 95       	ret

00000416 <__umulhisi3>:
 416:	a2 9f       	mul	r26, r18
 418:	b0 01       	movw	r22, r0
 41a:	b3 9f       	mul	r27, r19
 41c:	c0 01       	movw	r24, r0
 41e:	a3 9f       	mul	r26, r19
 420:	70 0d       	add	r23, r0
 422:	81 1d       	adc	r24, r1
 424:	11 24       	eor	r1, r1
 426:	91 1d       	adc	r25, r1
 428:	b2 9f       	mul	r27, r18
 42a:	70 0d       	add	r23, r0
 42c:	81 1d       	adc	r24, r1
 42e:	11 24       	eor	r1, r1
 430:	91 1d       	adc	r25, r1
 432:	08 95       	ret

00000434 <_exit>:
 434:	f8 94       	cli

00000436 <__stop_program>:
 436:	ff cf       	rjmp	.-2      	; 0x436 <__stop_program>
