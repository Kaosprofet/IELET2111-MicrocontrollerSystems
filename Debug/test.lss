
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000048c  00000520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080011a  0080011a  0000053a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000109f  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6e  00000000  00000000  0000177b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000993  00000000  00000000  000021e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00002b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000560  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e4  00000000  00000000  00003390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003b74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_1>
   8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  9e:	0c 94 44 02 	jmp	0x488	; 0x488 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <temp_adc_read>:
#include <avr/io.h>
#include "adc.h"


uint16_t temp_adc_read(void) {
  ADMUX = (ADMUX & 0xF0) | (0 & 0x0F);//(0<<MUX0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	80 83       	st	Z, r24
  ADCSRA |= (1<<ADSC);
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
  do {} while (ADCSRA & (1<<ADSC));
  ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  be:	86 fd       	sbrc	r24, 6
  c0:	fc cf       	rjmp	.-8      	; 0xba <temp_adc_read+0x14>
  uint8_t vall = ADCL;
  c2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  uint8_t valh = ADCH;
  c6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  uint16_t val = (valh<<8) | (vall);
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	98 2f       	mov	r25, r24
  ce:	88 27       	eor	r24, r24
  return val;
}
  d0:	82 2b       	or	r24, r18
  d2:	08 95       	ret

000000d4 <adc_init>:

void adc_init(void) {
  ADMUX = (1<<REFS0)|(0<<ADLAR);
  d4:	90 e4       	ldi	r25, 0x40	; 64
  d6:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  DIDR0 |= (1<<ADC0D);
  da:	ee e7       	ldi	r30, 0x7E	; 126
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	80 83       	st	Z, r24
  ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) ;
  e4:	83 e8       	ldi	r24, 0x83	; 131
  e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

  DDRD = 0x00;
  ea:	1a b8       	out	0x0a, r1	; 10
  DDRC = 0x00;
  ec:	17 b8       	out	0x07, r1	; 7
  PORTC |= (1<<0)|(1<<1);
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	88 b9       	out	0x08, r24	; 8
  ACSR = (1<<ACBG);
  f4:	90 bf       	out	0x30, r25	; 48
  f6:	08 95       	ret

000000f8 <light_adc_read>:
}

uint16_t light_adc_read(void) {
  ADMUX = (ADMUX & 0xF0)|(1 & 0x0F);//(1<<MUX0);
  f8:	ec e7       	ldi	r30, 0x7C	; 124
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	81 60       	ori	r24, 0x01	; 1
 102:	80 83       	st	Z, r24
  ADCSRA |= (1<<ADSC);
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
  do {} while (ADCSRA & (1<<ADSC));
 10e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 112:	86 fd       	sbrc	r24, 6
 114:	fc cf       	rjmp	.-8      	; 0x10e <light_adc_read+0x16>
  uint8_t vall = ADCL;
 116:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  uint8_t valh = ADCH;
 11a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  uint16_t val = (valh<<8) | (vall);
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	98 2f       	mov	r25, r24
 122:	88 27       	eor	r24, r24
  return val;
}
 124:	82 2b       	or	r24, r18
 126:	08 95       	ret

00000128 <initInterupt>:
#include <avr/interrupt.h>
#include "int.h"

void initInterupt(void){
	PORTD = (1<<intPin1)|(1<<intPin2);	// Internal pullup 
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	8b b9       	out	0x0b, r24	; 11
	EIMSK = (1<<INT0)|(1<<INT1);		// Enable interupt 0
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	8d bb       	out	0x1d, r24	; 29
	sei();								// Enable global interupts
 130:	78 94       	sei
 132:	08 95       	ret

00000134 <main>:

uint16_t temp = 0;
uint16_t light = 0;

int main(void) {
    timer1PWMInit();
 134:	0e 94 0f 01 	call	0x21e	; 0x21e <timer1PWMInit>
	adc_init();
 138:	0e 94 6a 00 	call	0xd4	; 0xd4 <adc_init>
	initUSART();
 13c:	0e 94 33 01 	call	0x266	; 0x266 <initUSART>
	runServo(0);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 1e 01 	call	0x23c	; 0x23c <runServo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	83 ed       	ldi	r24, 0xD3	; 211
 14c:	90 e3       	ldi	r25, 0x30	; 48
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x1a>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x24>
 158:	00 00       	nop
	_delay_ms(1000);
	initInterupt();
 15a:	0e 94 94 00 	call	0x128	; 0x128 <initInterupt>
    while (1) {
		//calServo(); // Calibrate the servo to find min/max values
		
		temp = temp_adc_read();
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <temp_adc_read>
 162:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <temp+0x1>
 166:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <temp>
		light = light_adc_read();
 16a:	0e 94 7c 00 	call	0xf8	; 0xf8 <light_adc_read>
 16e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 172:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		runServo(temp);
 176:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <temp>
 17a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <temp+0x1>
 17e:	0e 94 1e 01 	call	0x23c	; 0x23c <runServo>
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	83 ed       	ldi	r24, 0xD3	; 211
 186:	90 e3       	ldi	r25, 0x30	; 48
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x54>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x5e>
 192:	00 00       	nop
 194:	e4 cf       	rjmp	.-56     	; 0x15e <main+0x2a>

00000196 <__vector_1>:
		
		
    }
}

ISR(INT0_vect) {
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	printString("Temp value:" );
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 4b 01 	call	0x296	; 0x296 <printString>
	printWord(temp);
 1c0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <temp>
 1c4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <temp+0x1>
 1c8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <printWord>
	crnl();
 1cc:	0e 94 0c 02 	call	0x418	; 0x418 <crnl>
	printString("Light value:" );
 1d0:	8c e0       	ldi	r24, 0x0C	; 12
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 4b 01 	call	0x296	; 0x296 <printString>
	printWord(light);
 1d8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 1dc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 1e0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <printWord>
	crnl();
 1e4:	0e 94 0c 02 	call	0x418	; 0x418 <crnl>
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <__vector_2>:

ISR(INT1_vect) { // For senere bruk
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
	
}
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <timer1PWMInit>:
#include <avr/io.h>
#include <util/delay.h>
#include "servo.h"

void timer1PWMInit(void) {
	DDRB = (1<<SERVO_PIN);										// Setting PB1 as output
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10);		// Setting fast PWM and non-inverting mode
 222:	82 e8       	ldi	r24, 0x82	; 130
 224:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS11)|(1<<WGM13)|(1<<WGM12);					// Fast PWM and set prescaling
 228:	8a e1       	ldi	r24, 0x1A	; 26
 22a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = SERVO_PERIOD;
 22e:	80 e4       	ldi	r24, 0x40	; 64
 230:	9c e9       	ldi	r25, 0x9C	; 156
 232:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 236:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 23a:	08 95       	ret

0000023c <runServo>:
}

void runServo(uint16_t temp) {
	temp = 1023-temp;
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	33 e0       	ldi	r19, 0x03	; 3
 240:	28 1b       	sub	r18, r24
 242:	39 0b       	sbc	r19, r25
	temp = temp * (SERVO_MAX - SERVO_MIN) / ADC_MAX + SERVO_MIN;	// Mapping value for servo
 244:	a8 ed       	ldi	r26, 0xD8	; 216
 246:	be e0       	ldi	r27, 0x0E	; 14
 248:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	33 e0       	ldi	r19, 0x03	; 3
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodsi4>
 258:	20 55       	subi	r18, 0x50	; 80
 25a:	3b 4f       	sbci	r19, 0xFB	; 251
	OCR1A = temp;
 25c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 260:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 264:	08 95       	ret

00000266 <initUSART>:
  if(number >=10)
  {
    transmitByte('0'+((number /10)%10));
  }
  transmitByte('0'+(number %10));
}
 266:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 26a:	87 e6       	ldi	r24, 0x67	; 103
 26c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 270:	e0 ec       	ldi	r30, 0xC0	; 192
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	8d 7f       	andi	r24, 0xFD	; 253
 278:	80 83       	st	Z, r24
 27a:	88 e1       	ldi	r24, 0x18	; 24
 27c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 286:	08 95       	ret

00000288 <transmitByte>:
 288:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 28c:	95 ff       	sbrs	r25, 5
 28e:	fc cf       	rjmp	.-8      	; 0x288 <transmitByte>
 290:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 294:	08 95       	ret

00000296 <printString>:
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	8c 01       	movw	r16, r24
 29e:	c0 e0       	ldi	r28, 0x00	; 0
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <printString+0x12>
 2a2:	0e 94 44 01 	call	0x288	; 0x288 <transmitByte>
 2a6:	cf 5f       	subi	r28, 0xFF	; 255
 2a8:	f8 01       	movw	r30, r16
 2aa:	ec 0f       	add	r30, r28
 2ac:	f1 1d       	adc	r31, r1
 2ae:	80 81       	ld	r24, Z
 2b0:	81 11       	cpse	r24, r1
 2b2:	f7 cf       	rjmp	.-18     	; 0x2a2 <printString+0xc>
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	08 95       	ret

000002bc <printWord>:
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
 2c6:	9c 01       	movw	r18, r24
 2c8:	32 95       	swap	r19
 2ca:	22 95       	swap	r18
 2cc:	2f 70       	andi	r18, 0x0F	; 15
 2ce:	23 27       	eor	r18, r19
 2d0:	3f 70       	andi	r19, 0x0F	; 15
 2d2:	23 27       	eor	r18, r19
 2d4:	a7 e4       	ldi	r26, 0x47	; 71
 2d6:	b3 e0       	ldi	r27, 0x03	; 3
 2d8:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 2dc:	96 95       	lsr	r25
 2de:	87 95       	ror	r24
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	96 95       	lsr	r25
 2e6:	87 95       	ror	r24
 2e8:	80 5d       	subi	r24, 0xD0	; 208
 2ea:	0e 94 44 01 	call	0x288	; 0x288 <transmitByte>
 2ee:	9e 01       	movw	r18, r28
 2f0:	36 95       	lsr	r19
 2f2:	27 95       	ror	r18
 2f4:	36 95       	lsr	r19
 2f6:	27 95       	ror	r18
 2f8:	36 95       	lsr	r19
 2fa:	27 95       	ror	r18
 2fc:	a5 ec       	ldi	r26, 0xC5	; 197
 2fe:	b0 e2       	ldi	r27, 0x20	; 32
 300:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 304:	ac 01       	movw	r20, r24
 306:	52 95       	swap	r21
 308:	42 95       	swap	r20
 30a:	4f 70       	andi	r20, 0x0F	; 15
 30c:	45 27       	eor	r20, r21
 30e:	5f 70       	andi	r21, 0x0F	; 15
 310:	45 27       	eor	r20, r21
 312:	9a 01       	movw	r18, r20
 314:	ad ec       	ldi	r26, 0xCD	; 205
 316:	bc ec       	ldi	r27, 0xCC	; 204
 318:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 31c:	96 95       	lsr	r25
 31e:	87 95       	ror	r24
 320:	96 95       	lsr	r25
 322:	87 95       	ror	r24
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	9c 01       	movw	r18, r24
 32a:	22 0f       	add	r18, r18
 32c:	33 1f       	adc	r19, r19
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	82 0f       	add	r24, r18
 33c:	93 1f       	adc	r25, r19
 33e:	9a 01       	movw	r18, r20
 340:	28 1b       	sub	r18, r24
 342:	39 0b       	sbc	r19, r25
 344:	c9 01       	movw	r24, r18
 346:	80 5d       	subi	r24, 0xD0	; 208
 348:	0e 94 44 01 	call	0x288	; 0x288 <transmitByte>
 34c:	9e 01       	movw	r18, r28
 34e:	36 95       	lsr	r19
 350:	27 95       	ror	r18
 352:	36 95       	lsr	r19
 354:	27 95       	ror	r18
 356:	ab e7       	ldi	r26, 0x7B	; 123
 358:	b4 e1       	ldi	r27, 0x14	; 20
 35a:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 35e:	ac 01       	movw	r20, r24
 360:	56 95       	lsr	r21
 362:	47 95       	ror	r20
 364:	9a 01       	movw	r18, r20
 366:	ad ec       	ldi	r26, 0xCD	; 205
 368:	bc ec       	ldi	r27, 0xCC	; 204
 36a:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	9c 01       	movw	r18, r24
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	82 0f       	add	r24, r18
 38e:	93 1f       	adc	r25, r19
 390:	9a 01       	movw	r18, r20
 392:	28 1b       	sub	r18, r24
 394:	39 0b       	sbc	r19, r25
 396:	c9 01       	movw	r24, r18
 398:	80 5d       	subi	r24, 0xD0	; 208
 39a:	0e 94 44 01 	call	0x288	; 0x288 <transmitByte>
 39e:	9e 01       	movw	r18, r28
 3a0:	ad ec       	ldi	r26, 0xCD	; 205
 3a2:	bc ec       	ldi	r27, 0xCC	; 204
 3a4:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 3a8:	8c 01       	movw	r16, r24
 3aa:	16 95       	lsr	r17
 3ac:	07 95       	ror	r16
 3ae:	16 95       	lsr	r17
 3b0:	07 95       	ror	r16
 3b2:	16 95       	lsr	r17
 3b4:	07 95       	ror	r16
 3b6:	98 01       	movw	r18, r16
 3b8:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 3bc:	96 95       	lsr	r25
 3be:	87 95       	ror	r24
 3c0:	96 95       	lsr	r25
 3c2:	87 95       	ror	r24
 3c4:	96 95       	lsr	r25
 3c6:	87 95       	ror	r24
 3c8:	9c 01       	movw	r18, r24
 3ca:	22 0f       	add	r18, r18
 3cc:	33 1f       	adc	r19, r19
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	82 0f       	add	r24, r18
 3dc:	93 1f       	adc	r25, r19
 3de:	98 01       	movw	r18, r16
 3e0:	28 1b       	sub	r18, r24
 3e2:	39 0b       	sbc	r19, r25
 3e4:	c9 01       	movw	r24, r18
 3e6:	80 5d       	subi	r24, 0xD0	; 208
 3e8:	0e 94 44 01 	call	0x288	; 0x288 <transmitByte>
 3ec:	c8 01       	movw	r24, r16
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	00 0f       	add	r16, r16
 3f4:	11 1f       	adc	r17, r17
 3f6:	00 0f       	add	r16, r16
 3f8:	11 1f       	adc	r17, r17
 3fa:	00 0f       	add	r16, r16
 3fc:	11 1f       	adc	r17, r17
 3fe:	08 0f       	add	r16, r24
 400:	19 1f       	adc	r17, r25
 402:	ce 01       	movw	r24, r28
 404:	80 1b       	sub	r24, r16
 406:	91 0b       	sbc	r25, r17
 408:	80 5d       	subi	r24, 0xD0	; 208
 40a:	0e 94 44 01 	call	0x288	; 0x288 <transmitByte>
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <crnl>:

void crnl(void) {
  //carriage return and newline
  transmitByte(10);
 418:	8a e0       	ldi	r24, 0x0A	; 10
 41a:	0e 94 44 01 	call	0x288	; 0x288 <transmitByte>
  transmitByte(13);
 41e:	8d e0       	ldi	r24, 0x0D	; 13
 420:	0e 94 44 01 	call	0x288	; 0x288 <transmitByte>
 424:	08 95       	ret

00000426 <__udivmodsi4>:
 426:	a1 e2       	ldi	r26, 0x21	; 33
 428:	1a 2e       	mov	r1, r26
 42a:	aa 1b       	sub	r26, r26
 42c:	bb 1b       	sub	r27, r27
 42e:	fd 01       	movw	r30, r26
 430:	0d c0       	rjmp	.+26     	; 0x44c <__udivmodsi4_ep>

00000432 <__udivmodsi4_loop>:
 432:	aa 1f       	adc	r26, r26
 434:	bb 1f       	adc	r27, r27
 436:	ee 1f       	adc	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	a2 17       	cp	r26, r18
 43c:	b3 07       	cpc	r27, r19
 43e:	e4 07       	cpc	r30, r20
 440:	f5 07       	cpc	r31, r21
 442:	20 f0       	brcs	.+8      	; 0x44c <__udivmodsi4_ep>
 444:	a2 1b       	sub	r26, r18
 446:	b3 0b       	sbc	r27, r19
 448:	e4 0b       	sbc	r30, r20
 44a:	f5 0b       	sbc	r31, r21

0000044c <__udivmodsi4_ep>:
 44c:	66 1f       	adc	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	88 1f       	adc	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	1a 94       	dec	r1
 456:	69 f7       	brne	.-38     	; 0x432 <__udivmodsi4_loop>
 458:	60 95       	com	r22
 45a:	70 95       	com	r23
 45c:	80 95       	com	r24
 45e:	90 95       	com	r25
 460:	9b 01       	movw	r18, r22
 462:	ac 01       	movw	r20, r24
 464:	bd 01       	movw	r22, r26
 466:	cf 01       	movw	r24, r30
 468:	08 95       	ret

0000046a <__umulhisi3>:
 46a:	a2 9f       	mul	r26, r18
 46c:	b0 01       	movw	r22, r0
 46e:	b3 9f       	mul	r27, r19
 470:	c0 01       	movw	r24, r0
 472:	a3 9f       	mul	r26, r19
 474:	70 0d       	add	r23, r0
 476:	81 1d       	adc	r24, r1
 478:	11 24       	eor	r1, r1
 47a:	91 1d       	adc	r25, r1
 47c:	b2 9f       	mul	r27, r18
 47e:	70 0d       	add	r23, r0
 480:	81 1d       	adc	r24, r1
 482:	11 24       	eor	r1, r1
 484:	91 1d       	adc	r25, r1
 486:	08 95       	ret

00000488 <_exit>:
 488:	f8 94       	cli

0000048a <__stop_program>:
 48a:	ff cf       	rjmp	.-2      	; 0x48a <__stop_program>
