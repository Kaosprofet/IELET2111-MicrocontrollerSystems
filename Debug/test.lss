
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000047c  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080011a  0080011a  0000052a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000109f  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5f  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098d  00000000  00000000  000021ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00002b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000573  00000000  00000000  00002e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e4  00000000  00000000  0000337f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003b63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_1>
   8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 00 	call	0x124	; 0x124 <main>
  9e:	0c 94 3c 02 	jmp	0x478	; 0x478 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <temp_adc_read>:
#include <avr/io.h>
#include "adc.h"


uint16_t temp_adc_read(void) {
  ADCSRA |= (1<<ADSC);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  do {} while (ADCSRA & (1<<ADSC));
  b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b4:	86 fd       	sbrc	r24, 6
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <temp_adc_read+0xa>
  uint8_t temp_vall = ADCL;
  b8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  uint8_t temp_valh = ADCH;
  bc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  uint16_t temp_val = (temp_valh<<8) | (temp_vall);
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	98 2f       	mov	r25, r24
  c4:	88 27       	eor	r24, r24
  return temp_val;
}
  c6:	82 2b       	or	r24, r18
  c8:	08 95       	ret

000000ca <adc_init>:

void adc_init(void) {
  ADMUX = (1<<REFS0)|(0<<ADLAR);
  ca:	90 e4       	ldi	r25, 0x40	; 64
  cc:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  DIDR0 |= (1<<ADC0D);
  d0:	ee e7       	ldi	r30, 0x7E	; 126
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	80 83       	st	Z, r24
  ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) ;
  da:	83 e8       	ldi	r24, 0x83	; 131
  dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

  DDRD = 0x00;
  e0:	1a b8       	out	0x0a, r1	; 10
  DDRC = 0x00;
  e2:	17 b8       	out	0x07, r1	; 7
  PORTC |= (1<<0)|(1<<1);
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	83 60       	ori	r24, 0x03	; 3
  e8:	88 b9       	out	0x08, r24	; 8
  ACSR = (1<<ACBG);
  ea:	90 bf       	out	0x30, r25	; 48
  ec:	08 95       	ret

000000ee <light_adc_read>:
}

uint16_t light_adc_read(void) {
  ADMUX = (1<<MUX0);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  ADCSRA |= (1<<ADSC);
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	80 83       	st	Z, r24
  do {} while (ADCSRA & (1<<ADSC));
  fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 102:	86 fd       	sbrc	r24, 6
 104:	fc cf       	rjmp	.-8      	; 0xfe <light_adc_read+0x10>
  uint8_t temp_vall = ADCL;
 106:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  uint8_t temp_valh = ADCH;
 10a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  uint16_t temp_val = (temp_valh<<8) | (temp_vall);
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	98 2f       	mov	r25, r24
 112:	88 27       	eor	r24, r24
  return temp_val;
}
 114:	82 2b       	or	r24, r18
 116:	08 95       	ret

00000118 <initInterupt>:
#include <avr/interrupt.h>
#include "int.h"

void initInterupt(void){
	PORTD = (1<<intPin1)|(1<<intPin2);	// Internal pullup 
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	8b b9       	out	0x0b, r24	; 11
	EIMSK = (1<<INT0)|(1<<INT1);		// Enable interupt 0
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	8d bb       	out	0x1d, r24	; 29
	sei();								// Enable global interupts
 120:	78 94       	sei
 122:	08 95       	ret

00000124 <main>:

uint16_t temp = 0;
uint16_t light = 0;

int main(void) {
    timer1PWMInit();
 124:	0e 94 07 01 	call	0x20e	; 0x20e <timer1PWMInit>
	adc_init();
 128:	0e 94 65 00 	call	0xca	; 0xca <adc_init>
	initUSART();
 12c:	0e 94 2b 01 	call	0x256	; 0x256 <initUSART>
	runServo(0);
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 16 01 	call	0x22c	; 0x22c <runServo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	83 ed       	ldi	r24, 0xD3	; 211
 13c:	90 e3       	ldi	r25, 0x30	; 48
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x1a>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x24>
 148:	00 00       	nop
	_delay_ms(1000);
	initInterupt();
 14a:	0e 94 8c 00 	call	0x118	; 0x118 <initInterupt>
    while (1) {
		//calServo(); // Calibrate the servo to find min/max values
		
		temp = temp_adc_read();
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <temp_adc_read>
 152:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <temp+0x1>
 156:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <temp>
		light = light_adc_read();
 15a:	0e 94 77 00 	call	0xee	; 0xee <light_adc_read>
 15e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 162:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		runServo(temp);
 166:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <temp>
 16a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <temp+0x1>
 16e:	0e 94 16 01 	call	0x22c	; 0x22c <runServo>
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	83 ed       	ldi	r24, 0xD3	; 211
 176:	90 e3       	ldi	r25, 0x30	; 48
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x54>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x5e>
 182:	00 00       	nop
 184:	e4 cf       	rjmp	.-56     	; 0x14e <main+0x2a>

00000186 <__vector_1>:
		
		
    }
}

ISR(INT0_vect) {
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	printString("Temp value:" );
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 43 01 	call	0x286	; 0x286 <printString>
	printWord(temp);
 1b0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <temp>
 1b4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <temp+0x1>
 1b8:	0e 94 56 01 	call	0x2ac	; 0x2ac <printWord>
	crnl();
 1bc:	0e 94 04 02 	call	0x408	; 0x408 <crnl>
	printString("Light value:" );
 1c0:	8c e0       	ldi	r24, 0x0C	; 12
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 43 01 	call	0x286	; 0x286 <printString>
	printWord(light);
 1c8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 1cc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 1d0:	0e 94 56 01 	call	0x2ac	; 0x2ac <printWord>
	crnl();
 1d4:	0e 94 04 02 	call	0x408	; 0x408 <crnl>
}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_2>:

ISR(INT1_vect) { // For senere bruk
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
	
}
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <timer1PWMInit>:
#include <avr/io.h>
#include <util/delay.h>
#include "servo.h"

void timer1PWMInit(void) {
	DDRB = (1<<SERVO_PIN);										// Setting PB1 as output
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10);		// Setting fast PWM and non-inverting mode
 212:	82 e8       	ldi	r24, 0x82	; 130
 214:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS11)|(1<<WGM13)|(1<<WGM12);					// Fast PWM and set prescaling
 218:	8a e1       	ldi	r24, 0x1A	; 26
 21a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = SERVO_PERIOD;
 21e:	80 e4       	ldi	r24, 0x40	; 64
 220:	9c e9       	ldi	r25, 0x9C	; 156
 222:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 226:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 22a:	08 95       	ret

0000022c <runServo>:
}

void runServo(uint16_t temp) {
	temp = 1023-temp;
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	33 e0       	ldi	r19, 0x03	; 3
 230:	28 1b       	sub	r18, r24
 232:	39 0b       	sbc	r19, r25
	temp = temp * (SERVO_MAX - SERVO_MIN) / ADC_MAX + SERVO_MIN;	// Mapping value for servo
 234:	a8 ed       	ldi	r26, 0xD8	; 216
 236:	be e0       	ldi	r27, 0x0E	; 14
 238:	0e 94 2d 02 	call	0x45a	; 0x45a <__umulhisi3>
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	33 e0       	ldi	r19, 0x03	; 3
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	0e 94 0b 02 	call	0x416	; 0x416 <__udivmodsi4>
 248:	20 55       	subi	r18, 0x50	; 80
 24a:	3b 4f       	sbci	r19, 0xFB	; 251
	OCR1A = temp;
 24c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 250:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 254:	08 95       	ret

00000256 <initUSART>:
  if(number >=10)
  {
    transmitByte('0'+((number /10)%10));
  }
  transmitByte('0'+(number %10));
}
 256:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 25a:	87 e6       	ldi	r24, 0x67	; 103
 25c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 260:	e0 ec       	ldi	r30, 0xC0	; 192
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	8d 7f       	andi	r24, 0xFD	; 253
 268:	80 83       	st	Z, r24
 26a:	88 e1       	ldi	r24, 0x18	; 24
 26c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 270:	86 e0       	ldi	r24, 0x06	; 6
 272:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 276:	08 95       	ret

00000278 <transmitByte>:
 278:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 27c:	95 ff       	sbrs	r25, 5
 27e:	fc cf       	rjmp	.-8      	; 0x278 <transmitByte>
 280:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 284:	08 95       	ret

00000286 <printString>:
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	8c 01       	movw	r16, r24
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	03 c0       	rjmp	.+6      	; 0x298 <printString+0x12>
 292:	0e 94 3c 01 	call	0x278	; 0x278 <transmitByte>
 296:	cf 5f       	subi	r28, 0xFF	; 255
 298:	f8 01       	movw	r30, r16
 29a:	ec 0f       	add	r30, r28
 29c:	f1 1d       	adc	r31, r1
 29e:	80 81       	ld	r24, Z
 2a0:	81 11       	cpse	r24, r1
 2a2:	f7 cf       	rjmp	.-18     	; 0x292 <printString+0xc>
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <printWord>:
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ec 01       	movw	r28, r24
 2b6:	9c 01       	movw	r18, r24
 2b8:	32 95       	swap	r19
 2ba:	22 95       	swap	r18
 2bc:	2f 70       	andi	r18, 0x0F	; 15
 2be:	23 27       	eor	r18, r19
 2c0:	3f 70       	andi	r19, 0x0F	; 15
 2c2:	23 27       	eor	r18, r19
 2c4:	a7 e4       	ldi	r26, 0x47	; 71
 2c6:	b3 e0       	ldi	r27, 0x03	; 3
 2c8:	0e 94 2d 02 	call	0x45a	; 0x45a <__umulhisi3>
 2cc:	96 95       	lsr	r25
 2ce:	87 95       	ror	r24
 2d0:	96 95       	lsr	r25
 2d2:	87 95       	ror	r24
 2d4:	96 95       	lsr	r25
 2d6:	87 95       	ror	r24
 2d8:	80 5d       	subi	r24, 0xD0	; 208
 2da:	0e 94 3c 01 	call	0x278	; 0x278 <transmitByte>
 2de:	9e 01       	movw	r18, r28
 2e0:	36 95       	lsr	r19
 2e2:	27 95       	ror	r18
 2e4:	36 95       	lsr	r19
 2e6:	27 95       	ror	r18
 2e8:	36 95       	lsr	r19
 2ea:	27 95       	ror	r18
 2ec:	a5 ec       	ldi	r26, 0xC5	; 197
 2ee:	b0 e2       	ldi	r27, 0x20	; 32
 2f0:	0e 94 2d 02 	call	0x45a	; 0x45a <__umulhisi3>
 2f4:	ac 01       	movw	r20, r24
 2f6:	52 95       	swap	r21
 2f8:	42 95       	swap	r20
 2fa:	4f 70       	andi	r20, 0x0F	; 15
 2fc:	45 27       	eor	r20, r21
 2fe:	5f 70       	andi	r21, 0x0F	; 15
 300:	45 27       	eor	r20, r21
 302:	9a 01       	movw	r18, r20
 304:	ad ec       	ldi	r26, 0xCD	; 205
 306:	bc ec       	ldi	r27, 0xCC	; 204
 308:	0e 94 2d 02 	call	0x45a	; 0x45a <__umulhisi3>
 30c:	96 95       	lsr	r25
 30e:	87 95       	ror	r24
 310:	96 95       	lsr	r25
 312:	87 95       	ror	r24
 314:	96 95       	lsr	r25
 316:	87 95       	ror	r24
 318:	9c 01       	movw	r18, r24
 31a:	22 0f       	add	r18, r18
 31c:	33 1f       	adc	r19, r19
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	82 0f       	add	r24, r18
 32c:	93 1f       	adc	r25, r19
 32e:	9a 01       	movw	r18, r20
 330:	28 1b       	sub	r18, r24
 332:	39 0b       	sbc	r19, r25
 334:	c9 01       	movw	r24, r18
 336:	80 5d       	subi	r24, 0xD0	; 208
 338:	0e 94 3c 01 	call	0x278	; 0x278 <transmitByte>
 33c:	9e 01       	movw	r18, r28
 33e:	36 95       	lsr	r19
 340:	27 95       	ror	r18
 342:	36 95       	lsr	r19
 344:	27 95       	ror	r18
 346:	ab e7       	ldi	r26, 0x7B	; 123
 348:	b4 e1       	ldi	r27, 0x14	; 20
 34a:	0e 94 2d 02 	call	0x45a	; 0x45a <__umulhisi3>
 34e:	ac 01       	movw	r20, r24
 350:	56 95       	lsr	r21
 352:	47 95       	ror	r20
 354:	9a 01       	movw	r18, r20
 356:	ad ec       	ldi	r26, 0xCD	; 205
 358:	bc ec       	ldi	r27, 0xCC	; 204
 35a:	0e 94 2d 02 	call	0x45a	; 0x45a <__umulhisi3>
 35e:	96 95       	lsr	r25
 360:	87 95       	ror	r24
 362:	96 95       	lsr	r25
 364:	87 95       	ror	r24
 366:	96 95       	lsr	r25
 368:	87 95       	ror	r24
 36a:	9c 01       	movw	r18, r24
 36c:	22 0f       	add	r18, r18
 36e:	33 1f       	adc	r19, r19
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	82 0f       	add	r24, r18
 37e:	93 1f       	adc	r25, r19
 380:	9a 01       	movw	r18, r20
 382:	28 1b       	sub	r18, r24
 384:	39 0b       	sbc	r19, r25
 386:	c9 01       	movw	r24, r18
 388:	80 5d       	subi	r24, 0xD0	; 208
 38a:	0e 94 3c 01 	call	0x278	; 0x278 <transmitByte>
 38e:	9e 01       	movw	r18, r28
 390:	ad ec       	ldi	r26, 0xCD	; 205
 392:	bc ec       	ldi	r27, 0xCC	; 204
 394:	0e 94 2d 02 	call	0x45a	; 0x45a <__umulhisi3>
 398:	8c 01       	movw	r16, r24
 39a:	16 95       	lsr	r17
 39c:	07 95       	ror	r16
 39e:	16 95       	lsr	r17
 3a0:	07 95       	ror	r16
 3a2:	16 95       	lsr	r17
 3a4:	07 95       	ror	r16
 3a6:	98 01       	movw	r18, r16
 3a8:	0e 94 2d 02 	call	0x45a	; 0x45a <__umulhisi3>
 3ac:	96 95       	lsr	r25
 3ae:	87 95       	ror	r24
 3b0:	96 95       	lsr	r25
 3b2:	87 95       	ror	r24
 3b4:	96 95       	lsr	r25
 3b6:	87 95       	ror	r24
 3b8:	9c 01       	movw	r18, r24
 3ba:	22 0f       	add	r18, r18
 3bc:	33 1f       	adc	r19, r19
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	82 0f       	add	r24, r18
 3cc:	93 1f       	adc	r25, r19
 3ce:	98 01       	movw	r18, r16
 3d0:	28 1b       	sub	r18, r24
 3d2:	39 0b       	sbc	r19, r25
 3d4:	c9 01       	movw	r24, r18
 3d6:	80 5d       	subi	r24, 0xD0	; 208
 3d8:	0e 94 3c 01 	call	0x278	; 0x278 <transmitByte>
 3dc:	c8 01       	movw	r24, r16
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	00 0f       	add	r16, r16
 3e4:	11 1f       	adc	r17, r17
 3e6:	00 0f       	add	r16, r16
 3e8:	11 1f       	adc	r17, r17
 3ea:	00 0f       	add	r16, r16
 3ec:	11 1f       	adc	r17, r17
 3ee:	08 0f       	add	r16, r24
 3f0:	19 1f       	adc	r17, r25
 3f2:	ce 01       	movw	r24, r28
 3f4:	80 1b       	sub	r24, r16
 3f6:	91 0b       	sbc	r25, r17
 3f8:	80 5d       	subi	r24, 0xD0	; 208
 3fa:	0e 94 3c 01 	call	0x278	; 0x278 <transmitByte>
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	08 95       	ret

00000408 <crnl>:

void crnl(void) {
  //carriage return and newline
  transmitByte(10);
 408:	8a e0       	ldi	r24, 0x0A	; 10
 40a:	0e 94 3c 01 	call	0x278	; 0x278 <transmitByte>
  transmitByte(13);
 40e:	8d e0       	ldi	r24, 0x0D	; 13
 410:	0e 94 3c 01 	call	0x278	; 0x278 <transmitByte>
 414:	08 95       	ret

00000416 <__udivmodsi4>:
 416:	a1 e2       	ldi	r26, 0x21	; 33
 418:	1a 2e       	mov	r1, r26
 41a:	aa 1b       	sub	r26, r26
 41c:	bb 1b       	sub	r27, r27
 41e:	fd 01       	movw	r30, r26
 420:	0d c0       	rjmp	.+26     	; 0x43c <__udivmodsi4_ep>

00000422 <__udivmodsi4_loop>:
 422:	aa 1f       	adc	r26, r26
 424:	bb 1f       	adc	r27, r27
 426:	ee 1f       	adc	r30, r30
 428:	ff 1f       	adc	r31, r31
 42a:	a2 17       	cp	r26, r18
 42c:	b3 07       	cpc	r27, r19
 42e:	e4 07       	cpc	r30, r20
 430:	f5 07       	cpc	r31, r21
 432:	20 f0       	brcs	.+8      	; 0x43c <__udivmodsi4_ep>
 434:	a2 1b       	sub	r26, r18
 436:	b3 0b       	sbc	r27, r19
 438:	e4 0b       	sbc	r30, r20
 43a:	f5 0b       	sbc	r31, r21

0000043c <__udivmodsi4_ep>:
 43c:	66 1f       	adc	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	88 1f       	adc	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	1a 94       	dec	r1
 446:	69 f7       	brne	.-38     	; 0x422 <__udivmodsi4_loop>
 448:	60 95       	com	r22
 44a:	70 95       	com	r23
 44c:	80 95       	com	r24
 44e:	90 95       	com	r25
 450:	9b 01       	movw	r18, r22
 452:	ac 01       	movw	r20, r24
 454:	bd 01       	movw	r22, r26
 456:	cf 01       	movw	r24, r30
 458:	08 95       	ret

0000045a <__umulhisi3>:
 45a:	a2 9f       	mul	r26, r18
 45c:	b0 01       	movw	r22, r0
 45e:	b3 9f       	mul	r27, r19
 460:	c0 01       	movw	r24, r0
 462:	a3 9f       	mul	r26, r19
 464:	70 0d       	add	r23, r0
 466:	81 1d       	adc	r24, r1
 468:	11 24       	eor	r1, r1
 46a:	91 1d       	adc	r25, r1
 46c:	b2 9f       	mul	r27, r18
 46e:	70 0d       	add	r23, r0
 470:	81 1d       	adc	r24, r1
 472:	11 24       	eor	r1, r1
 474:	91 1d       	adc	r25, r1
 476:	08 95       	ret

00000478 <_exit>:
 478:	f8 94       	cli

0000047a <__stop_program>:
 47a:	ff cf       	rjmp	.-2      	; 0x47a <__stop_program>
